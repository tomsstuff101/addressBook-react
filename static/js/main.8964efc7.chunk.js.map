{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Title","className","List","props","console","log","theState","contacts","name","contactList","map","contact","key","id","type","value","toDelete","onChange","checkDeleteHandler","mobile","AddressBook","state","formHandler","e","preventDefault","target","currentContacts","newContact","length","push","setState","theDeleteHandler","deleteArr","forEach","index","onSubmit","this","placeholder","checkHandler","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQAgBMA,EAAQ,WAEV,OACE,yBAAKC,UAAU,SACb,8CAOFC,EAAO,SAACC,GAEZC,QAAQC,IAAI,WACZD,QAAQC,IAAR,iCAAmCF,EAAMG,SAASC,SAAS,GAAGC,OAC9D,IAAMC,EAAcN,EAAMG,SAASC,SAEnC,OACE,6BACKE,EAAYC,KAAI,SAAAC,GACf,OACI,yBAAKC,IAAKD,EAAQE,GAAIZ,UAAU,eAC5B,yBAAKA,UAAU,aACX,yBAAKA,UAAU,YACX,4BAAKU,EAAQH,MACb,2BAAOM,KAAK,WAAWN,KAAK,WAAWO,MAAOJ,EAAQK,SAAUC,SAAU,kBAAM,EAAKC,yBAE3F,4BAAKP,EAAQQ,eAc3BC,E,2MAEFC,MAAQ,CACNd,SAAU,CACE,CAACM,GAAI,EACLL,KAAK,iBACLW,OAAO,GACPH,UAAS,K,EAW3BM,YAAc,SAACC,GACbnB,QAAQC,IAAR,WACAkB,EAAEC,iBACFpB,QAAQC,IAAIkB,EAAEE,OAAOjB,KAAKO,OAC1BX,QAAQC,IAAIkB,EAAEE,OAAON,OAAOJ,OAG5B,IAAIW,EAAkB,EAAKL,MAAMd,SAK7BoB,EAAa,CAACd,GAJNa,EAAgBE,OAIApB,KAHde,EAAEE,OAAOjB,KAAKO,MAGeI,OAF3BI,EAAEE,OAAON,OAAOJ,MAE8BC,UAAS,GACvEZ,QAAQC,IAAR,6BAA+BsB,EAAWnB,KAA1C,aAAmDmB,EAAWR,SAC9DO,EAAgBG,KAAKF,GACrB,EAAKG,SAAS,CAACvB,SAAUmB,IACzBtB,QAAQC,IAAR,mCAAqC,EAAKgB,MAAMd,SAAhD,MAIAgB,EAAEE,OAAOjB,KAAKO,MAAQ,GACtBQ,EAAEE,OAAON,OAAOJ,MAAQ,I,EAO1BG,mBAAqB,SAACK,GACpBnB,QAAQC,IAAR,2BACAD,QAAQC,IAAR,+BAAiCkB,K,EAMnCQ,iBAAmB,WACjB3B,QAAQC,IAAR,cACA,IAAI2B,EAAY,GACd,EAAKX,MAAMd,SAAS0B,SAAQ,SAACtB,EAASuB,IAEZ,IAArBvB,EAAQK,UACPgB,EAAUH,KAAKK,GAEnB9B,QAAQC,IAAR,4BAA8B2B,Q,wEAS9B,OAEE,yBAAK/B,UAAU,sBACf,kBAAC,EAAD,MAIA,0BAAMA,UAAU,aAAakC,SAAUC,KAAKd,aAC1C,2BAAOR,KAAK,OAAON,KAAK,OAAO6B,YAAY,OAAOpC,UAAU,cAC5D,2BAAOa,KAAK,SAASN,KAAK,SAAS6B,YAAY,gBAAgBpC,UAAU,cACzE,4BAAQA,UAAU,SAASa,KAAK,UAAhC,QAGF,kBAAC,EAAD,CAAMR,SAAU8B,KAAKf,MAAOiB,aAAcF,KAAKlB,qBAE/C,yBAAKjB,UAAU,aAAasC,QAASH,KAAKL,kBAA1C,e,GAtFkBS,IAAMC,WAyGjBC,E,iLANX,OACE,kBAAC,EAAD,U,GAHYF,IAAMC,WC9IJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8964efc7.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\n// Brief:\n// Create a simple address book that you can add phone numbers to.\n// It should show the numbers in a list if any have been entered\n\n//    | enter num |\n// \n//    | 13426     |\n//    | 4288      |\n//    | 3085657   |\n\n\n\nconst Title = () => {\n\n    return(\n      <div className=\"title\">\n        <h1>Address Book</h1>\n      </div>\n    )\n\n}\n\n\nconst List = (props) => {\n  // theState    checkHandler\n  console.log('list...')\n  console.log(`props.theState -->  ${props.theState.contacts[0].name}`)\n  const contactList = props.theState.contacts\n\n  return(\n    <div>\n        {contactList.map(contact => { \n          return (\n              <div key={contact.id} className=\"listWrapper\">\n                  <div className=\"listBlock\">\n                      <div className=\"nameKeep\">\n                          <li>{contact.name}</li>\n                          <input type=\"checkbox\" name=\"toDelete\" value={contact.toDelete} onChange={() => this.checkDeleteHandler()}></input>\n                    </div>\n                    <li>{contact.mobile}</li>\n                </div>\n              </div>\n              )  \n          })}\n    </div>\n  )\n  \n}\n\n\n\n\n\nclass AddressBook extends React.Component{\n\n    state = {\n      contacts: [  \n                  {id: 0, \n                  name:\"no records yet\", \n                  mobile:\"\", \n                  toDelete:false\n                  }\n                ]  \n      // want an array of objects\n      // e.g.  [  {id: 0, name:another, mobile:12345, toDelete:false}, ...]\n    }\n\n    \n\n// ***** HANDLERS ******/\n\nformHandler = (e) => {\n  console.log(`add....`)\n  e.preventDefault()\n  console.log(e.target.name.value)\n  console.log(e.target.mobile.value)\n\n  // build a new contact object\n  let currentContacts = this.state.contacts\n  let newId = currentContacts.length // generate new Id\n  let theName = e.target.name.value\n  let theMobile = e.target.mobile.value\n  // toDelete will be used to splice the contacts array if delete button clicked\n  let newContact = {id:newId, name: theName, mobile: theMobile, toDelete:false}\n  console.log(`newContact -->  ${newContact.name}  ${newContact.mobile}`)\n  currentContacts.push(newContact)\n  this.setState({contacts: currentContacts})\n  console.log(`added new contact --> ${this.state.contacts} `)\n  \n\n  // clear form inputs -- NOT working\n  e.target.name.value = \"\"\n  e.target.mobile.value = \"\"\n\n}\n\n\n\n\ncheckDeleteHandler = (e)=>{\n  console.log(`check delete ticked....`)\n  console.log(`event target -->  ${e}`)\n}\n\n\n\n\ntheDeleteHandler = ()=>{\n  console.log(`delete....`)\n  let deleteArr = []\n    this.state.contacts.forEach((contact, index) => { \n      // scan through all of the list and remove records that have 'to Delete: true'\n      if(contact.toDelete === true){\n          deleteArr.push(index)\n      }\n      console.log(`deleteArr -->  ${deleteArr}`)\n    })\n\n    // Now cycle through the woule contacts and delete\n    // '  contacts.splice(index,1) ' \n}\n\n\n    render(){\n      return(\n        \n        <div className=\"addressBookWrapper\">\n        <Title/>\n        {/*use props to pass -bind?- listHandler to the List components*/}\n        {/* <NewNumbers theForm={()=>this.formHandler}/> */}\n\n        <form className=\"newNumbers\" onSubmit={this.formHandler}>\n          <input type=\"text\" name=\"name\" placeholder=\"name\" className=\"formInput\"></input>\n          <input type=\"number\" name=\"mobile\" placeholder=\"mobile number\" className=\"formInput\"></input>\n          <button className=\"submit\" type=\"submit\">add</button>\n        </form>\n\n        <List theState={this.state} checkHandler={this.checkDeleteHandler}/>\n\n        <div className=\"deleteButt\" onClick={this.theDeleteHandler}>Delete</div>\n        \n        </div>\n      )\n    }\n\n}\n\n//   <ClearButt theHandler={this.operatorHandler}/>\n\n\nclass App extends React.Component{\n  render(){\n    return(\n      <AddressBook/>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}